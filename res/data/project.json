[
    {
        "title": "University Companion App",
        "project_type": [
            {
                "name": "Mobile Development"
            },
            {
                "name": "Flutter Project"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "Flutter"
            },
            {
                "name": "Dart"
            },
            {
                "name": "Firebase"
            }
        ],
        "slug": "university-companion-app",
        "source": "https://github.com/Nycarus/OTU-Companion-App/tree/master/otu_companion",
        "images": [
            {
                "image": "../images/image/companion_app/companion_app_demo.gif"
            },
            {
                "image": "../images/image/companion_app/companion_app_empty_room_finder_sample.png"
            },
            {
                "image": "../images/image/companion_app/companion_app_event_finder_calendar_sample.png"
            },
            {
                "image": "../images/image/companion_app/companion_app_event_form_sample.png"
            },
            {
                "image": "../images/image/companion_app/companion_app_guides_view_sample.png"
            }
        ],
        "videos": [],
        "format_type": "standard-project",
        "status": "complete",
        "description": "University Companion App is a mobile application developed using Flutter SDK. Using the application, users may find open classrooms at Ontario Tech University to do school work, hang out, or play around. Users may also share events and guides with other users of the application.\n\nTo use the application, users must sign up for an account or login using a pre-existing account, using an email and password. Firebase Authentication will handle the login process. User account information, event information, and guide information are stored in a Firebase cloud database.\n\nAfter logging in, users are able to update their profiles, view open classrooms, share guides, and participate in events. Joined events are displayed on the Calendar tab and main dashboard for quick access. The event locations are displayed using OpenStreetMap API.\n\nFull-in-depth overview and set up guide can be found on the Github link."
    },
    {
        "title": "Expendable Employees",
        "project_type": [
            {
                "name": "React Project"
            },
            {
                "name": "Web Development"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "React"
            },
            {
                "name": "Material UI"
            },
            {
                "name": "Javascript"
            },
            {
                "name": "HTML"
            },
            {
                "name": "CSS"
            },
            {
                "name": "MongoDB"
            },
            {
                "name": "NodeJS"
            }
        ],
        "slug": "expendable-employees",
        "source": "https://github.com/Nycarus/expendable-employees/tree/main/expendable-employees",
        "videos": [],
        "images": [
            {
                "image": "../images/image/Expendable Employees/schedule.png"
            },
            {
                "image": "../images/image/Expendable Employees/employees.png"
            },
            {
                "image": "../images/image/Expendable Employees/mail.png"
            },
            {
                "image": "../images/image/Expendable Employees/profile.png"
            }
        ],
        "format_type": "standard-project",
        "status": "complete",
        "description": "A Managerial Tool web application for managing your employees, but with a small twist. To access the application, a user must register a company and create an account. From there, the creator will be made an admin and they may add or manage employees, change their schedules, fire a random non-admin employee, etc. Users within the company may send messages, make events, and manage work schedules. User account information are stored in a MongoDB database.\n\nUser authentication for validation, login credentials, and priviledges are handle using JSON Web Tokens. Before certain data are stored in the MongoDB database, the data is salted and hashed using bycrpt. Schema Validation is also used to ensure that the data being processed and stored remain consistent."
    },
    {
        "title": "LearnMorseCode",
        "project_type": [
            {
                "name": "Storm Hacks 2022 Hackathon"
            },
            {
                "name": "React Project"
            },
            {
                "name": "Web Development"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "React"
            },
            {
                "name": "Bootstrap"
            },
            {
                "name": "Javascript"
            },
            {
                "name": "HTML"
            },
            {
                "name": "CSS"
            },
            {
                "name": "MongoDB"
            },
            {
                "name": "NodeJS"
            }
        ],
        "slug": "learn-morse-code",
        "source": "https://github.com/gglue/stormhacks2022",
        "videos": [],
        "images": [
            {
                "image": "../images/image/LearnMorseCode/learn.png"
            },
            {
                "image": "../images/image/LearnMorseCode/quiz.png"
            }
        ],
        "format_type": "standard-project",
        "status": "complete",
        "description": "LearnMorseCode is a short project intended for learning and is built for the Storm Hacks 2022 Hackathon. In this web application, users can learn how English letters are converted into morse code and how they sound. By clicking on the quiz page, the user is quizzed on their ability to convert English sentences into morse code and vice versa. The success rate and the number of questions answered are stored on the user's account."
    },
    {
        "title": "JCord",
        "project_type": [
            {
                "name": "JavaFX Project"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "Java"
            },
            {
                "name": "JavaFX"
            }
        ],
        "slug": "jcord",
        "source": null,
        "videos": [],
        "images": [
            {
                "image": "../images/image/JCord/chat.png"
            }
        ],
        "format_type": "standard-project",
        "status": "complete",
        "description": "JCord is a chat application modeled after Discord and developed using JavaFX SDK. To use this application, the user must enter a name and add a picture. After doing so, users can send messages and emojis to other users of the application, by typing in the text field at the bottom of the application or clicking on the emoji symbol to display available emojis that could be sent. The chat log is will update the chat list with the latest messages upon using the application as well as showing online users."
    },
    {
        "title": "Mock Bank System",
        "project_type": [
            {
                "name": "C++ Project"
            },
            {
                "name": "Java Project"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "C++"
            },
            {
                "name": "Java"
            },
            {
                "name": "JUnit"
            },
            {
                "name": "Shell"
            }
        ],
        "slug": "mock-bank-system",
        "source": "https://github.com/Stef997/3060_phase_2",
        "videos": [],
        "images": [
            {
                "image": "../images/image/Mock Bank System/mock_bank_sys.png"
            }
        ],
        "format_type": "standard-project",
        "status": "complete",
        "description": "The Mock Bank System is a text-based application that allows users to simulate a bank ATM system. The project is split into five phases and was made with two separate teams. The first team consisted of three members, including myself, and the second team consisted of four members, including myself. The first team developed the front end of the application, as well as integration and unit testing for the front end. The second team developed the back-end of the application, as well as the unit-testing of the back-end.\n\nPhase 1-3:\n\nThe front end of the system was created using C++. The program allows users to perform actions with their bank account. Actions include:\n\n- login\n- logout\n- withdraw\n- transfer\n- paybill\n- deposit\n- create\n- delete\n- disable\n- changeplan\n\nThe program will display instructions and transactions that can be carried out upon typing the action. Certain actions, such as delete, disable, and changeplan, can only be accessed by an admin user. All transactions performed will be recorded in a text file and will be eventually sent to the back-end for processing by the end of the day.\n\nThe front end is tested using shell scripts. Each transaction has several unit test cases for each interaction. When run, the output of the application, provided with an input text file, will be compared with an expected output. Upon finishing the script, each unit test will be recorded onto a text file, displaying the cases that have passed and the cases that have failed.\n\nPhase 4-5\n\nThe back-end of the system was created using Java and is tested using JUnit, similarly to phases 1-3. The program processes the transaction file, created by the front end, and will make changes to the accounts of the users at the end of the day, using a process involving master account files and account files."
    },
    {
        "title": "Pygame Brick Breaker",
        "project_type": [
            {
                "name": "Pygame Project"
            }
        ],
        "item_category": "software",
        "tags": [
            {
                "name": "Python"
            },
            {
                "name": "Pygame"
            }
        ],
        "slug": "pygame-brick-breaker",
        "source": null,
        "videos": [
            {
                "video_url": "https://www.youtube.com/embed/uGGx1bBVx3g",
                "title": "Pygame Brick Breaker"
            }
        ],
        "images": [
            {
                "image": "../images/image/Pygame Brick Breaker/brick_breaker.png"
            }
        ],
        "format_type": "standard-project",
        "status": "complete",
        "description": "Pygame Brick Breaker is a brick breaker game built using Pygame and Python 2.7. The player's goal is to clear all the bricks and proceed to the next level. The player is given several lives and the difficulty of the game gets harder with each passing level."
    }
]