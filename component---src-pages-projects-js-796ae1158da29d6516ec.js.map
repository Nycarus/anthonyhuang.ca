{"version":3,"file":"component---src-pages-projects-js-796ae1158da29d6516ec.js","mappings":"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","sources":["webpack://anthony-s-website/./src/components/projectList/desktopProjectListView.styled.js","webpack://anthony-s-website/./src/components/projectList/desktopProjectListView.js","webpack://anthony-s-website/./src/components/projectList/mobileProjectListView.styled.js","webpack://anthony-s-website/./src/components/projectList/mobileProjectListView.js","webpack://anthony-s-website/./src/components/projectList/projectList.styled.js","webpack://anthony-s-website/./src/components/projectList/projectList.js","webpack://anthony-s-website/./src/pages/projects.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nimport { Box, Typography, Grid, Paper} from \"@mui/material\";\r\n\r\nexport const ContentBox = styled(Box)`\r\n    display: flex;\r\n`;\r\n\r\nexport const ContentPaper = styled(Paper)`\r\n    margin: 20px;\r\n`;\r\n\r\nexport const ContentGrid = styled(Grid)`\r\n    direction: column;\r\n    max-width: 2000px;\r\n    margin: 0 auto;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ProjectInfoBox = styled(Box)`\r\n    flex-shrink: 1;\r\n    height: 300px;\r\n    width: auto;\r\n`;\r\n\r\nexport const ProjectTitle = styled(Typography)`\r\n    text-align: left;\r\n    font-weight: 550 !important;\r\n    font-size: 32px !important;\r\n    padding-left: 10px;\r\n`;\r\n\r\nexport const ProjectTypeGrid = styled(Grid)`\r\n    direction: row;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-left: 10px;\r\n`\r\n\r\nexport const ProjectTypeGridItem = styled(Grid)`\r\n    padding-right: 8px;\r\n`;\r\n\r\nexport const ProjectTypeBox = styled(Box)`\r\n    width: fit-content;\r\n    margin: 1px;\r\n    border-radius: 2px !important;\r\n`\r\n\r\nexport const ProjectTypeTypography = styled(Typography)`\r\n    color: #fff;\r\n    padding: 5px;\r\n    font-size: 13px !important;\r\n    font-weight:650 !important;\r\n`\r\n\r\nexport const ProjectButtonGrid = styled(Grid)`\r\n    direction: row;\r\n`;\r\n\r\nexport const ProjectButtonGridItem = styled(Grid)`\r\n    padding-right: 8px;\r\n`;\r\n\r\nexport const ProjectButtonBox = styled(Box)`\r\n    display: flex;\r\n    min-width: 200px;\r\n    min-height: 50px;\r\n    width: fit-content;\r\n    height: fit-content;\r\n    margin: 1px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 8px !important;\r\n    box-shadow: 2px 2px !important;\r\n`\r\n\r\nexport const ProjectButtonTypography = styled(Typography)`\r\n    text-align: center;\r\n    color: #fff;\r\n    font-size: 15px !important;\r\n    font-weight: 650 !important;\r\n`;\r\n\r\nexport const ProjectDescriptionBox = styled(Box)`\r\n    padding-top: 5px;\r\n    padding-bottom: 8px;\r\n    padding-left: 10px;\r\n`;\r\n\r\nexport const ProjectDescriptionTypography = styled(Typography)`\r\n    font-size: 15px !important;\r\n    max-height: 100px;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 4 !important;\r\n    -webkit-box-orient: vertical !important;\r\n    overflow: hidden;\r\n    \r\n    text-overflow: ellipsis;\r\n\r\n    white-space: normal;\r\n    word-wrap: break-word;\r\n    white-space: pre-wrap;\r\n`\r\n\r\nexport const ProjectImageBoxOuter = styled(Box)`\r\n    display: flex;\r\n    max-height: 300px;\r\n    max-width: 300px;\r\n    min-width: 300px;\r\n    min-height: 300px;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    justify-content: center; \r\n    border-radius: 4px 0px 0px 4px !important;\r\n`;\r\n\r\nexport const ProjectImage = styled.img`\r\n    position: relative !important;\r\n    width: fit-content;\r\n    height: fit-content;\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    float: right;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    object-fit: scale-down;\r\n`;","import React from \"react\"\r\nimport { IconButton } from '@mui/material';\r\n\r\nimport { ContentPaper, ContentBox, ContentGrid, ProjectInfoBox, ProjectTitle,\r\n    ProjectTypeGrid, ProjectTypeGridItem, ProjectTypeBox, ProjectTypeTypography,\r\n    ProjectButtonGrid, ProjectButtonBox, ProjectButtonGridItem, ProjectButtonTypography,\r\n    ProjectDescriptionBox, ProjectDescriptionTypography,\r\n    ProjectImageBoxOuter, ProjectImage } from './desktopProjectListView.styled'\r\n\r\nexport default function DesktopProjectListView(props) {\r\n    return(\r\n        <ContentGrid>{\r\n            props.data.allProjectJson.edges.map(({node}) => {\r\n                return(\r\n                    <ContentPaper>\r\n                        <ContentBox>\r\n                            {/* Project Image */}\r\n                            <ProjectImageBoxOuter>\r\n                            {\r\n                                node.images ? <ProjectImage src={node.images[0].image.publicURL}/> : <div/>\r\n                            }\r\n                            </ProjectImageBoxOuter>\r\n\r\n                            <ProjectInfoBox>\r\n                                {/* Project Title */}\r\n                                <ProjectTitle>{node.title}</ProjectTitle>\r\n\r\n                                {/* Project Type */}\r\n                                <ProjectTypeGrid container>{\r\n                                    node.project_type ?\r\n                                    node.project_type.map((type) => {\r\n                                        return(\r\n                                            <ProjectTypeGridItem item>\r\n                                                <ProjectTypeBox bgcolor=\"primary.main\">\r\n                                                    <ProjectTypeTypography >{type.name}</ProjectTypeTypography>\r\n                                                </ProjectTypeBox>\r\n                                            </ProjectTypeGridItem>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    null\r\n                                }</ProjectTypeGrid>\r\n\r\n                                {/* Project Tags */}\r\n                                <ProjectTypeGrid container>{\r\n                                    node.tags ?\r\n                                    node.tags.map((tag) => {\r\n                                        return(\r\n                                            <ProjectTypeGridItem item>\r\n                                                <ProjectTypeBox bgcolor=\"secondary.main\">\r\n                                                    <ProjectTypeTypography>{tag.name}</ProjectTypeTypography>\r\n                                                </ProjectTypeBox>\r\n                                            </ProjectTypeGridItem>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    null\r\n                                }</ProjectTypeGrid>\r\n\r\n                                {/* View Project Buttons */}\r\n                                <ProjectButtonGrid container>\r\n                                    <ProjectButtonGridItem item>\r\n                                        <IconButton href={`/project/${node.slug}`}>\r\n                                            <ProjectButtonBox bgcolor=\"warning.main\">\r\n                                                <ProjectButtonTypography>\r\n                                                    More Information\r\n                                                </ProjectButtonTypography>\r\n                                            </ProjectButtonBox>\r\n                                        </IconButton>\r\n                                    </ProjectButtonGridItem>\r\n                                    \r\n                                    {\r\n                                        /* Github link if there's one*/\r\n                                        node.source ?\r\n                                        <ProjectButtonGridItem item>\r\n                                            <IconButton href={node.source} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                <ProjectButtonBox bgcolor=\"warning.main\">\r\n                                                    <ProjectButtonTypography>\r\n                                                        Github\r\n                                                    </ProjectButtonTypography>\r\n                                                </ProjectButtonBox>\r\n                                            </IconButton>\r\n                                        </ProjectButtonGridItem>\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                </ProjectButtonGrid>\r\n\r\n                                {/* Project Description */}\r\n                                <ProjectDescriptionBox>\r\n                                    <ProjectDescriptionTypography>\r\n                                        {node.description}\r\n                                    </ProjectDescriptionTypography>\r\n                                </ProjectDescriptionBox>\r\n                            </ProjectInfoBox>\r\n                        </ContentBox>\r\n                    </ContentPaper>\r\n                )\r\n            })\r\n        }</ContentGrid>\r\n    );\r\n}","import styled from \"styled-components\";\r\nimport { Typography, IconButton, Grid, Paper, Box } from \"@mui/material\";\r\n\r\nexport const ContentGrid = styled(Grid)`\r\n    direction: row;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ProjectBox = styled(Box)`\r\n    margin: 1px;\r\n`;\r\n\r\nexport const ProjectButton = styled(IconButton)`\r\n`;\r\n\r\nexport const ProjectTypography = styled(Typography)`\r\n    text-align: center;\r\n    margin-left: 3px;\r\n    margin-right: 3px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    color: white !important;\r\n    font-size: 20px !important;\r\n    font-weight: 600 !important;\r\n`;\r\n\r\nexport const ProjectPaper = styled(Paper)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 45vw;\r\n    width: 45vw;\r\n    background-size: cover;\r\n    background-image: url(${props => props.imageURL});\r\n    background-color: rgba(0, 0, 0, .65);\r\n    background-blend-mode: darken;\r\n`;","import React from \"react\"\r\n\r\nimport { ContentGrid, ProjectBox, ProjectButton, ProjectTypography, ProjectPaper } from \"./mobileProjectListView.styled\";\r\n\r\nexport default function MobileProjectListView(props) {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <ContentGrid container>{\r\n                props.data.allProjectJson.edges.map(({node}) => (\r\n                    <ProjectBox key={node.title + \"mobile\"}>{\r\n                        <ProjectButton href={`/project/${node.slug}`}>\r\n                            <ProjectPaper imageURL={node.images[0].image.publicURL}>\r\n                                <ProjectTypography>\r\n                                    {node.title}\r\n                                </ProjectTypography>\r\n                            </ProjectPaper>\r\n                        </ProjectButton>\r\n                    }</ProjectBox>\r\n                ))\r\n            }</ContentGrid>\r\n        </React.Fragment>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const ContentDiv = styled.div`\r\n    padding-top: 40px !important;\r\n`;","import React from \"react\"\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\n\r\nimport DesktopProjectListView from \"./desktopProjectListView\";\r\nimport MobileProjectListView from \"./mobileProjectListView\";\r\nimport { ContentDiv } from \"./projectList.styled\";\r\n\r\nexport default function ProjectList(props) {\r\n\r\n    const query = graphql`\r\n        query GetAllProjectItems {\r\n            allProjectJson {\r\n                edges {\r\n                    node {\r\n                        title\r\n                        project_type {\r\n                            name\r\n                        }\r\n                        item_category\r\n                        tags {\r\n                            name\r\n                        }\r\n                        slug\r\n                        source\r\n                        images {\r\n                            image {\r\n                                publicURL\r\n                            }\r\n                        }\r\n                        videos {\r\n                            video_url\r\n                            title\r\n                        }\r\n                        format_type\r\n                        status\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `\r\n    const data = useStaticQuery(query);\r\n\r\n    return(\r\n        <ContentDiv>{\r\n            /* Window View of the project list */\r\n            !props.isMobile ? <DesktopProjectListView data={data}/> : <MobileProjectListView data={data}/>\r\n        }</ContentDiv>\r\n    );\r\n}","import * as React from \"react\"\r\nimport Layout from '../components/layout'\r\nimport ProjectList from '../components/projectList/projectList';\r\n\r\n// markup\r\nexport default function ProjectsPage () {\r\n    return (\r\n        <Layout>\r\n            <ProjectList/>\r\n        </Layout>\r\n    );\r\n};"],"names":["ContentBox","styled","Box","withConfig","ContentPaper","Paper","ContentGrid","Grid","ProjectInfoBox","ProjectTitle","Typography","ProjectTypeGrid","ProjectTypeGridItem","ProjectTypeBox","ProjectTypeTypography","ProjectButtonGrid","ProjectButtonGridItem","ProjectButtonBox","ProjectButtonTypography","ProjectDescriptionBox","ProjectDescriptionTypography","ProjectImageBoxOuter","ProjectImage","DesktopProjectListView","props","React","data","allProjectJson","edges","map","node","images","src","image","publicURL","title","container","project_type","type","item","bgcolor","name","tags","tag","IconButton","href","slug","source","target","rel","description","ProjectBox","ProjectButton","ProjectTypography","ProjectPaper","imageURL","MobileProjectListView","key","ContentDiv","ProjectList","useStaticQuery","isMobile","ProjectsPage","Layout"],"sourceRoot":""}