{"version":3,"file":"component---src-pages-projects-jsx-ec50dfd6c6ce2bc2f7cc.js","mappings":"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","sources":["webpack://anthony-s-website/./src/components/projectList/desktopProjectListView.styled.js","webpack://anthony-s-website/./src/components/projectList/desktopProjectListView.js","webpack://anthony-s-website/./src/components/projectList/mobileProjectListView.styled.js","webpack://anthony-s-website/./src/components/projectList/mobileProjectListView.js","webpack://anthony-s-website/./src/components/projectList/projectList.styled.js","webpack://anthony-s-website/./src/components/projectList/projectList.js","webpack://anthony-s-website/./src/pages/projects.jsx"],"sourcesContent":["import styled, { keyframes } from \"styled-components\";\r\n\r\nimport { Box, Typography, Grid, Paper, IconButton} from \"@mui/material\";\r\n\r\nexport const ContentBox = styled(Box)`\r\n    display: flex;\r\n`;\r\n\r\nconst slideInFromLeft = keyframes`\r\n    0% {\r\n        transform: translateX(-100%);\r\n    }\r\n\r\n    100% {\r\n        transform: translateX(0);\r\n    }\r\n`\r\n\r\nexport const ContentPaper = styled(Paper)`\r\n    margin: 20px;\r\n    animation: ${props=> props.index * 0.5 + \"s\"} ease-out 0s 1 ${slideInFromLeft};\r\n`;\r\n\r\nexport const ContentGrid = styled(Grid)`\r\n    direction: column;\r\n    max-width: 2000px;\r\n    margin: 0 auto;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ProjectInfoBox = styled(Box)`\r\n    flex-shrink: 1;\r\n    height: 300px;\r\n    width: auto;\r\n    border-style: solid;\r\n    border-width: thin;\r\n`;\r\n\r\nexport const ProjectTitle = styled(Typography)`\r\n    text-align: left;\r\n    font-weight: 550;\r\n    font-size: 32px;\r\n    padding-left: 10px;\r\n`;\r\n\r\nexport const ProjectTypeGrid = styled(Grid)`\r\n    direction: row;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-left: 10px;\r\n`\r\n\r\nexport const ProjectTypeGridItem = styled(Grid)`\r\n    padding-right: 8px;\r\n`;\r\n\r\nexport const ProjectTypeBox = styled(Box)`\r\n    width: fit-content;\r\n    margin: 1px;\r\n    border-radius: 2px;\r\n`\r\n\r\nexport const ProjectTypeTypography = styled(Typography)`\r\n    color: #fff;\r\n    padding: 5px;\r\n    font-size: 13px;\r\n    font-weight:650;\r\n`\r\n\r\nexport const ProjectButtonGrid = styled(Grid)`\r\n    direction: row;\r\n`;\r\n\r\nconst highlight = keyframes`\r\n    0% {\r\n        box-shadow: none;\r\n    }\r\n\r\n    100% {\r\n      box-shadow: 0 0 50px #ccc;\r\n    }\r\n`\r\n\r\nexport const ProjectButtonGridItem = styled(Grid)`\r\n    padding-right: 8px;\r\n`;\r\n\r\nexport const ProjectIconButton = styled(IconButton)`\r\n    \r\n`;\r\n\r\nexport const ProjectButtonBox = styled(Box)`\r\n    display: flex;\r\n    min-width: 200px;\r\n    min-height: 50px;\r\n    width: fit-content;\r\n    height: fit-content;\r\n    margin: 1px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 2px rgba(140,140,140,0.9);\r\n    &:hover{\r\n        animation: ${highlight} ease-in-out 0.3s forwards;\r\n    }\r\n`\r\n\r\nexport const ProjectButtonTypography = styled(Typography)`\r\n    text-align: center;\r\n    color: #fff;\r\n    font-size: 15px;\r\n    font-weight: 650;\r\n`;\r\n\r\nexport const ProjectDescriptionBox = styled(Box)`\r\n    padding-top: 5px;\r\n    padding-bottom: 8px;\r\n    padding-left: 10px;\r\n`;\r\n\r\nexport const ProjectDescriptionTypography = styled(Typography)`\r\n    font-size: 15px;\r\n    max-height: 100px;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 4;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n    \r\n    text-overflow: ellipsis;\r\n\r\n    white-space: normal;\r\n    word-wrap: break-word;\r\n    white-space: pre-wrap;\r\n`\r\n\r\nexport const ProjectImageBoxOuter = styled(Box)`\r\n    display: flex;\r\n    max-height: 300px;\r\n    max-width: 300px;\r\n    min-width: 300px;\r\n    min-height: 300px;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    justify-content: center; \r\n    border-radius: 4px 0px 0px 4px;\r\n    border-style: solid;\r\n    border-width: thin;\r\n`;\r\n\r\nexport const ProjectImage = styled.img`\r\n    position: relative;\r\n    width: fit-content;\r\n    height: fit-content;\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    float: right;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    object-fit: scale-down;\r\n`;","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nimport { ContentPaper, ContentBox, ContentGrid, ProjectInfoBox, ProjectTitle,\r\n    ProjectTypeGrid, ProjectTypeGridItem, ProjectTypeBox, ProjectTypeTypography,\r\n    ProjectButtonGrid, ProjectButtonBox, ProjectButtonGridItem, ProjectButtonTypography,\r\n    ProjectDescriptionBox, ProjectDescriptionTypography,\r\n    ProjectImageBoxOuter, ProjectImage, ProjectIconButton } from './desktopProjectListView.styled'\r\n\r\nexport default function DesktopProjectListView(props) {\r\n    return(\r\n        <ContentGrid>{\r\n            props.data.allProjectJson.edges.map(({node}, index) => {\r\n                return(\r\n                    <ContentPaper key={node.title + \"desktop\"} index={index}>\r\n                        <ContentBox>\r\n                            {/* Project Image */}\r\n                            <ProjectImageBoxOuter>\r\n                            {\r\n                                node.images ? <ProjectImage src={node.images[0].image.publicURL}/> : <div/>\r\n                            }\r\n                            </ProjectImageBoxOuter>\r\n                            \r\n                            <ProjectInfoBox>\r\n                                {/* Project Title */}\r\n                                <ProjectTitle>{node.title}</ProjectTitle>\r\n\r\n                                {/* Project Type */}\r\n                                <ProjectTypeGrid container>{\r\n                                    node.project_type ?\r\n                                    node.project_type.map((type) => {\r\n                                        return(\r\n                                            <ProjectTypeGridItem item key={\"desktopProject_type_\"+type.name}>\r\n                                                <ProjectTypeBox bgcolor=\"primary.main\">\r\n                                                    <ProjectTypeTypography >{type.name}</ProjectTypeTypography>\r\n                                                </ProjectTypeBox>\r\n                                            </ProjectTypeGridItem>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    null\r\n                                }</ProjectTypeGrid>\r\n\r\n                                {/* Project Tags */}\r\n                                <ProjectTypeGrid container>{\r\n                                    node.tags ?\r\n                                    node.tags.map((tag) => {\r\n                                        return(\r\n                                            <ProjectTypeGridItem item key={\"desktopProject_tag_\"+tag.name}>\r\n                                                <ProjectTypeBox bgcolor=\"secondary.main\">\r\n                                                    <ProjectTypeTypography>{tag.name}</ProjectTypeTypography>\r\n                                                </ProjectTypeBox>\r\n                                            </ProjectTypeGridItem>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    null\r\n                                }</ProjectTypeGrid>\r\n\r\n                                {/* View Project Buttons */}\r\n                                <ProjectButtonGrid container>\r\n                                    <ProjectButtonGridItem item>\r\n                                        <ProjectIconButton component={Link} to={`/projects/${node.slug}`}>\r\n                                            <ProjectButtonBox bgcolor=\"warning.main\">\r\n                                                <ProjectButtonTypography>\r\n                                                    More Information\r\n                                                </ProjectButtonTypography>\r\n                                            </ProjectButtonBox>\r\n                                        </ProjectIconButton>\r\n                                    </ProjectButtonGridItem>\r\n                                    \r\n                                    {\r\n                                        /* Github link if there's one*/\r\n                                        node.source ?\r\n                                        <ProjectButtonGridItem item>\r\n                                            <ProjectIconButton href={node.source} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                <ProjectButtonBox bgcolor=\"warning.main\">\r\n                                                    <ProjectButtonTypography>\r\n                                                        Github\r\n                                                    </ProjectButtonTypography>\r\n                                                </ProjectButtonBox>\r\n                                            </ProjectIconButton>\r\n                                        </ProjectButtonGridItem>\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                </ProjectButtonGrid>\r\n\r\n                                {/* Project Description */}\r\n                                <ProjectDescriptionBox>\r\n                                    <ProjectDescriptionTypography>\r\n                                        {node.description}\r\n                                    </ProjectDescriptionTypography>\r\n                                </ProjectDescriptionBox>\r\n                            </ProjectInfoBox>\r\n                        </ContentBox>\r\n                    </ContentPaper>\r\n                )\r\n            })\r\n        }</ContentGrid>\r\n    );\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { Typography, IconButton, Grid, Paper, Box } from \"@mui/material\";\r\n\r\nexport const ContentGrid = styled(Grid)`\r\n    direction: row;\r\n    justify-content: center;\r\n`;\r\n\r\nconst fadeIn = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n`\r\n\r\nexport const ProjectBox = styled(Box)`\r\n    margin: 1px;\r\n    animation: ${props=> props.index * 0.5 + \"s\"} ease-out 0s 1 ${fadeIn};\r\n`;\r\n\r\nexport const ProjectButton = styled(IconButton)`\r\n`;\r\n\r\nexport const ProjectTypography = styled(Typography)`\r\n    text-align: center;\r\n    margin-left: 3px;\r\n    margin-right: 3px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    color: white;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n`;\r\n\r\nexport const ProjectPaper = styled(Paper)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 45vw;\r\n    width: 45vw;\r\n    background-size: cover;\r\n    background-image: url(${props => props.imageURL});\r\n    background-color: rgba(0, 0, 0, .65);\r\n    background-blend-mode: darken;\r\n`;","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nimport { ContentGrid, ProjectBox, ProjectButton, ProjectTypography, ProjectPaper } from \"./mobileProjectListView.styled\";\r\n\r\nexport default function MobileProjectListView(props) {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <ContentGrid container>{\r\n                props.data.allProjectJson.edges.map(({node}, index) => (\r\n                    <ProjectBox key={node.title + \"mobile\"} index={index}>{\r\n                        <ProjectButton component={Link} to={`/projects/${node.slug}`}>\r\n                            <ProjectPaper imageURL={node.images[0].image.publicURL}>\r\n                                <ProjectTypography>\r\n                                    {node.title}\r\n                                </ProjectTypography>\r\n                            </ProjectPaper>\r\n                        </ProjectButton>\r\n                    }</ProjectBox>\r\n                ))\r\n            }</ContentGrid>\r\n        </React.Fragment>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const ContentDiv = styled.div`\r\n    padding-top: 40px;\r\n`;","import React from \"react\"\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\n\r\nimport DesktopProjectListView from \"./desktopProjectListView\";\r\nimport MobileProjectListView from \"./mobileProjectListView\";\r\nimport { ContentDiv } from \"./projectList.styled\";\r\nimport { DeviceContext } from \"../../contexts/appConfigContext\";\r\n\r\nconst ProjectList = (props) => {\r\n\r\n    const query = graphql`\r\n        query GetAllProjectItems {\r\n            allProjectJson {\r\n                edges {\r\n                    node {\r\n                        title\r\n                        project_type {\r\n                            name\r\n                        }\r\n                        item_category\r\n                        tags {\r\n                            name\r\n                        }\r\n                        slug\r\n                        source\r\n                        images {\r\n                            image {\r\n                                publicURL\r\n                            }\r\n                        }\r\n                        videos {\r\n                            video_url\r\n                            title\r\n                        }\r\n                        format_type\r\n                        status\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `\r\n    const data = useStaticQuery(query);\r\n\r\n    return(\r\n        <DeviceContext.Consumer>\r\n            {({isMobile}) => (\r\n                <ContentDiv>{\r\n                    /* Window View of the project list */\r\n                    isMobile ? <MobileProjectListView data={data}/> : <DesktopProjectListView data={data}/>\r\n                }</ContentDiv>\r\n            )}\r\n        </DeviceContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default ProjectList;","import * as React from \"react\"\r\nimport ProjectList from '../components/projectList/projectList';\r\nimport Layout from \"../components/layout\";\r\nimport Seo from \"../components/seo\";\r\n\r\nconst ProjectsPage = () => (\r\n    <Layout>\r\n        <ProjectList/>\r\n    </Layout>\r\n);\r\n\r\nexport const Head = () => (\r\n    <Seo title=\"Projects\"/>\r\n);\r\n\r\nexport default ProjectsPage;"],"names":["ContentBox","styled","Box","slideInFromLeft","keyframes","ContentPaper","Paper","props","index","ContentGrid","Grid","ProjectInfoBox","ProjectTitle","Typography","ProjectTypeGrid","ProjectTypeGridItem","ProjectTypeBox","ProjectTypeTypography","ProjectButtonGrid","highlight","ProjectButtonGridItem","ProjectIconButton","IconButton","ProjectButtonBox","ProjectButtonTypography","ProjectDescriptionBox","ProjectDescriptionTypography","ProjectImageBoxOuter","ProjectImage","DesktopProjectListView","React","data","allProjectJson","edges","map","node","key","title","images","src","image","publicURL","container","project_type","type","item","name","bgcolor","tags","tag","component","Link","to","slug","source","href","target","rel","description","fadeIn","ProjectBox","ProjectButton","ProjectTypography","ProjectPaper","imageURL","MobileProjectListView","ContentDiv","useStaticQuery","DeviceContext","isMobile","Head"],"sourceRoot":""}